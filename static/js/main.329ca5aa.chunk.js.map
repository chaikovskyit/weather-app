{"version":3,"sources":["components/LocationAndDate/LocationAndDate.jsx","utils/helpers.js","components/CurrentTemperature/CurrentTemperature.jsx","components/Info/Info.jsx","components/CurrentStats/CurrentStats.jsx","components/HourlyWeatherItem/HourlyWeatherItem.jsx","components/HourlyWeatherList/HourlyWeatherList.jsx","utils/images/svg/loader1.svg","components/Loader/Loader.jsx","components/Form/Form.jsx","utils/images/svg/error.svg","components/Error/Error.jsx","components/NextDaysWeatherItem/NextDaysWeatherItem.jsx","components/NextDaysWeatherList/NextDaysWeatherList.jsx","App.js","index.js"],"names":["LocationAndDate","city","date","country","className","getUrlsByCoords","location","coords","latitude","longitude","process","getFormatedWeatherState","weatherData","list","currentWeather","slice","nextDays","length","filter","obj","i","getImageURL","id","scale","round","number","Math","floor","getUrlByCityName","CurrentTemperature","str","icon","temperature","description","src","alt","charAt","toUpperCase","Info","topStr","bottomStr","withDegSymbol","CurrentStats","hightTemp","lowTemp","wind","humidity","sunrise","sunset","HourlyWeatherItem","hour","moment","unix","format","SwiperCore","use","Navigation","Pagination","HourlyWeatherList","futureWeather","navigation","pagination","clickable","spaceBetween","slidesPerView","map","weather","dt","main","temp","Loader","loader1","Form","submitHandler","changeHandler","inputValue","onSubmit","e","a","preventDefault","type","placeholder","onChange","Error","error","NextDaysWeatherItem","NextDaysWeatherList","App","useState","isLoading","setIsLoading","value","setValue","setError","setWeather","getInitialWeather","url","window","fetch","res","json","data","getNewWeather","cod","getCoordinates","navigator","geolocation","getCurrentPosition","useEffect","getData","currentData","tempMax","temp_max","tempMin","temp_min","name","target","speed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.329ca5aa.chunk.js","sourcesContent":["import React from 'react';\nimport './locationAndDate.scss';\n\nconst LocationAndDate = ({ city, date, country }) => (\n  <div className=\"location-and-date\">\n    <div className=\"location-and-date__city\">\n      {`${city}, ${country}`}\n    </div>\n    <div className=\"location-and-date__date\">\n      {date}\n    </div>\n  </div>\n);\n\nexport default LocationAndDate;\n","export const getUrlsByCoords = (location) => {\n  const { coords } = location;\n  const { latitude, longitude } = coords;\n\n  return `http://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`;\n};\n\nexport const getFormatedWeatherState = (weatherData) => {\n  const { list, city } = weatherData;\n  const currentWeather = list.slice(0, 8);\n  const rest = list.slice(8, list.length);\n  const nextDays = rest.filter((obj, i) => i % 8 === 0);\n  return { currentWeather, nextDays, city };\n};\n\nexport const getImageURL = (id, scale = 4) => `http://openweathermap.org/img/wn/${id}@${scale}x.png`;\n\nexport const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const round = (number) => Math.floor(+number);\n\nexport const getUrlByCityName = (city) => `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`;\n","import React from 'react';\nimport { getImageURL, capitalize, round } from '../../utils/helpers';\nimport './currentTemperature.scss';\n\nconst CurrentTemperature = ({ icon, temperature, description }) => (\n  <div className=\"current-temperature col-md-6\">\n    <img src={getImageURL(icon, 4)} alt=\"weather icon\" />\n    <div className=\"current-temperature__info\">\n      <div className=\"current-temperature__temperature\">\n        {round(temperature)}\n        &#176;\n      </div>\n      <div>{capitalize(description)}</div>\n    </div>\n  </div>\n);\n\nexport default CurrentTemperature;\n","import React from 'react';\nimport './info.scss';\n\nconst Info = ({\n  topStr, bottomStr, withDegSymbol = false, className = 'col-sm-4',\n}) => (\n  <div className={`info ${className} text-center p-0`}>\n    <div className=\"info__top\">\n      {topStr}\n      {withDegSymbol && (<span>&#176;</span>)}\n    </div>\n    <div className=\"info__bottom\">\n      {bottomStr}\n    </div>\n  </div>\n);\n\nexport default Info;\n","import React from 'react';\nimport './currentStats.scss';\nimport Info from '../Info/Info';\n\nconst CurrentStats = ({\n  hightTemp, lowTemp, wind, humidity, sunrise, sunset,\n}) => (\n  <div className=\"current-stats col-md-6\">\n    <div className=\"row justify-content-center\">\n      <Info topStr={hightTemp} bottomStr=\"High\" withDegSymbol className=\"col-2\" />\n      <Info topStr={wind} bottomStr=\"Wind\" className=\"col-5\" />\n      <Info topStr={sunrise} bottomStr=\"Sunrice\" className=\"col-5\" />\n    </div>\n    <div className=\"row justify-content-center\">\n      <Info topStr={lowTemp} bottomStr=\"Low\" withDegSymbol className=\"col-2\" />\n      <Info topStr={humidity} bottomStr=\"Humidity\" className=\"col-5\" />\n      <Info topStr={sunset} bottomStr=\"Sunset\" className=\"col-5\" />\n    </div>\n  </div>\n);\n\nexport default CurrentStats;\n","import React from 'react';\nimport moment from 'moment';\nimport { getImageURL, round } from '../../utils/helpers';\n\nimport './hourlyWeatherItem.scss';\n\nconst HourlyWeatherItem = ({ hour, icon, temperature }) => (\n  <div className=\"hourly-weather-item swiper-slide\">\n    {moment.unix(hour).format('LT')}\n    <img src={getImageURL(icon, 2)} alt=\"weather icon\" />\n    {round(temperature)}\n    &#176;\n  </div>\n);\n\nexport default HourlyWeatherItem;\n","import React from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation, Pagination } from 'swiper';\nimport HourlyWeatherItem from '../HourlyWeatherItem/HourlyWeatherItem';\nimport './hourlyWeatherList.scss';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/pagination/pagination.scss';\n\nSwiperCore.use([Navigation, Pagination]);\n\nconst HourlyWeatherList = ({ futureWeather }) => (\n  <div className=\"hourly-weather-list\">\n    <Swiper\n      id=\"main\"\n      navigation\n      pagination={{ clickable: true }}\n      spaceBetween={1}\n      slidesPerView={4}\n    >\n      {futureWeather.map(({ weather, dt: hour, main }) => (\n        <SwiperSlide key={hour}>\n          <HourlyWeatherItem\n            icon={weather[0].icon}\n            temperature={main.temp}\n            hour={hour}\n          />\n        </SwiperSlide>\n      ))}\n    </Swiper>\n  </div>\n);\n\nexport default HourlyWeatherList;\n","export default __webpack_public_path__ + \"static/media/loader1.c33ef664.svg\";","import React from 'react';\nimport loader1 from '../../utils/images/svg/loader1.svg';\nimport './loader.scss';\n\nconst Loader = () => (\n  <div className=\"loader\">\n    <img className=\"loader__icon\" src={loader1} alt=\"loader icon\" />\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport './form.scss';\n\nconst Form = ({ submitHandler, changeHandler, inputValue }) => {\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    await submitHandler(inputValue);\n  };\n\n  return (\n    <form className=\"search-form mb-3\" onSubmit={(e) => onSubmit(e)}>\n      <input\n        type=\"text\"\n        className=\"search-form__input\"\n        placeholder=\"search city\"\n        onChange={changeHandler}\n      />\n      <button\n        className=\"search-form__button\"\n        type=\"submit\"\n      >\n        &#128269;\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","export default __webpack_public_path__ + \"static/media/error.7eb91340.svg\";","import React from 'react';\nimport './error.scss';\nimport error from '../../utils/images/svg/error.svg';\n\nconst Error = () => (\n  <div className=\"error\">\n    <div>\n      <div>O..o city not found 😭</div>\n      <img className=\"icon\" src={error} alt=\"error icon\" />\n    </div>\n  </div>\n);\n\nexport default Error;\n","import React from 'react';\nimport moment from 'moment';\nimport { getImageURL, round } from '../../utils/helpers';\nimport './nextDaysWeatherItem.scss';\n\nconst NextDaysWeatherItem = ({ hour, icon, temperature }) => (\n  <div className=\"row item\">\n    <div className=\"col-4 column\">\n      {moment.unix(hour).format('ddd Do')}\n    </div>\n    <div className=\"col-4 column\">\n      <img src={getImageURL(icon, 2)} alt=\"weather icon\" />\n    </div>\n    <div className=\"col-4 column\">\n      {round(temperature)}\n      &#176;\n    </div>\n  </div>\n);\n\nexport default NextDaysWeatherItem;\n","import React from 'react';\nimport NextDaysWeatherItem from '../NextDaysWeatherItem/NextDaysWeatherItem';\n\nconst NextDaysWeatherList = ({ nextDays }) => (\n  <>\n    {nextDays.map(({ weather, dt: hour, main }) => (\n      <NextDaysWeatherItem\n        icon={weather[0].icon}\n        temperature={main.temp}\n        hour={hour}\n        key={hour}\n      />\n    ))}\n  </>\n);\n\nexport default NextDaysWeatherList;\n","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport LocationAndDate from './components/LocationAndDate/LocationAndDate';\nimport {\n  getUrlsByCoords, getFormatedWeatherState, round, getUrlByCityName,\n} from './utils/helpers';\nimport CurrentTemperature from './components/CurrentTemperature/CurrentTemperature';\nimport CurrentStats from './components/CurrentStats/CurrentStats';\nimport HourlyWeatherList from './components/HourlyWeatherList/HourlyWeatherList';\nimport Loader from './components/Loader/Loader';\nimport Form from './components/Form/Form';\nimport Error from './components/Error/Error';\nimport NextDaysWeatherList from './components/NextDaysWeatherList/NextDaysWeatherList';\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [value, setValue] = useState(' ');\n  const [error, setError] = useState(false);\n  const [weather, setWeather] = useState({\n    currentWeather: [],\n    nextDays: [],\n    city: {},\n  });\n\n  const getInitialWeather = async (location) => {\n    const url = getUrlsByCoords(location);\n    const res = await window.fetch(url);\n    const data = await res.json();\n\n    setWeather(getFormatedWeatherState(data));\n    setIsLoading(false);\n  };\n\n  const getNewWeather = async () => {\n    setError(false);\n    setIsLoading(true);\n    const url = getUrlByCityName(value);\n    const res = await window.fetch(url);\n    const data = await res.json();\n    if (+data.cod === 404) {\n      setIsLoading(false);\n      setError(true);\n      return;\n    }\n    setWeather(getFormatedWeatherState(data));\n    setIsLoading(false);\n  };\n\n  const getCoordinates = async () => {\n    window.navigator.geolocation.getCurrentPosition(getInitialWeather);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      await getCoordinates();\n    };\n    getData();\n  }, []);\n\n  const { currentWeather, nextDays, city } = weather;\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  const currentData = weather.currentWeather[0];\n  const date = moment().format('dddd Do MMMM');\n  const { main, weather: weatherData, wind } = currentData;\n  const { temp_max: tempMax, temp_min: tempMin, humidity } = main;\n  const { sunrise, sunset } = city;\n\n  const changeHandler = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"app-container container\">\n        <header>\n          {!isLoading && !error && (\n            <LocationAndDate\n              country={city.country}\n              city={city.name}\n              date={date}\n            />\n          )}\n          <Form\n            submitHandler={getNewWeather}\n            changeHandler={changeHandler}\n            inputValue={value}\n          />\n        </header>\n        {!isLoading && error && (\n          <Error />\n        )}\n        {!isLoading && !error && (\n        <div>\n          <div className=\"row\">\n            <CurrentTemperature\n              temperature={main.temp}\n              description={weatherData[0].description}\n              icon={weatherData[0].icon}\n            />\n            <CurrentStats\n              hightTemp={round(tempMax)}\n              lowTemp={round(tempMin)}\n              wind={`${wind.speed} km/h`}\n              humidity={`${humidity}%`}\n              sunrise={moment.unix(sunrise).format('LT')}\n              sunset={moment.unix(sunset).format('LT')}\n            />\n            <div className=\"future-weather-container mt-4 w-100 \">\n              <p>Todays weather</p>\n              <HourlyWeatherList futureWeather={currentWeather} />\n            </div>\n\n          </div>\n          <NextDaysWeatherList nextDays={nextDays} />\n        </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}